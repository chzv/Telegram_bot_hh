services:
  db:
    image: postgres:16
    container_name: hh-db-1
    restart: unless-stopped
    env_file: [.env.prod]
    ports: ["5433:5432"]
    volumes: [pgdata:/var/lib/postgresql/data]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks: [appnet]

  redis:
    image: redis:7
    container_name: hh-redis-1
    restart: unless-stopped
    ports: ["6379:6379"]
    networks: [appnet]
    # environment: {}  # NEMILING_* здесь не нужны

  backend:
    build: .
    container_name: hh-backend-1
    restart: unless-stopped
    depends_on: [db, redis]
    env_file: [.env.prod]
    environment:
      PYTHONPATH: /app/backend
    command: >
      sh -lc "alembic -c /app/alembic.ini upgrade head || true;
            exec uvicorn --app-dir /app/backend app.main:app --host 0.0.0.0 --port 8000"
    ports: ["8000:8000"]
    volumes:
      - ./adminka:/app/adminka:ro
      - ./alembic.ini:/app/alembic.ini:ro
    healthcheck:
      test: ["CMD-SHELL", "python - <<'PY'\nimport urllib.request,sys\nu='http://127.0.0.1:8000/openapi.json'\ntry:\n r=urllib.request.urlopen(u,timeout=2)\n sys.exit(0 if r.getcode()<400 else 1)\nexcept Exception:\n sys.exit(1)\nPY"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks: [appnet]

  worker:
    build: .
    container_name: hh-worker-1
    command: sh -lc "PYTHONPATH=/app/backend python -c 'import asyncio; from app.services.dispatcher import run_loop; asyncio.run(run_loop(dry_run=False))'"
    restart: unless-stopped
    depends_on:
      db: {condition: service_healthy}
      redis: {condition: service_started}
      backend: {condition: service_started}
    env_file: [.env.prod]
    environment:
      NEMILING_API_BASE: "https://nemilin.pro/API"
      NEMILING_PROJECT_ID: "671479"
      NEMILING_API_TOKEN: "5050760224:7b0f321dfa582c"
    networks: [appnet]

  autoscheduler:
    build: .
    container_name: hh-autoscheduler
    command: sh -lc "PYTHONPATH=/app/backend python -c 'import asyncio; from app.services.auto_scheduler import run_loop; asyncio.run(run_loop())'"
    restart: unless-stopped
    depends_on:
      db: {condition: service_healthy}
      backend: {condition: service_started}
    env_file: [.env.prod]
    environment:
      AUTO_POLL_EVERY_SEC: "300"
    networks: [appnet]

  front_bot:
    build:
      context: .
      dockerfile: front_bot/Dockerfile
    container_name: hh-front-bot
    environment:
      BACKEND_URL: "http://backend:8000"
      API_BASE_URL: "https://api.hhofferbot.ru/api/v1"
      LOG_LEVEL: "INFO"
    restart: unless-stopped
    depends_on: [backend]
    networks: [appnet]

  caddy:
    image: caddy:2
    container_name: hh-caddy
    ports: ["80:80", "443:443"]
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - ./adminka:/srv/adminka:ro
    depends_on: [backend]
    restart: unless-stopped
    networks: [appnet]
  
networks:
  appnet: {}

volumes:
  pgdata: {}
  caddy_data: {}
  caddy_config: {}
