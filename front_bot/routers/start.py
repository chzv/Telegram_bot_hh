# front_bot/routers/start.py
from __future__ import annotations

import os
import httpx
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, ContextTypes, Application, CallbackQueryHandler
from utils.api_client import referrals_track
from telegram.constants import ParseMode

from urllib.parse import parse_qs

def _parse_utm_from_payload(payload: str) -> tuple[str|None, str|None, str|None]:
    """
    –û–∂–∏–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:
      "utm_source=tect&utm_medium=user&utm_campaign=111"
    –î–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–ª—é—á–∏: s/m/c.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (source, medium, campaign) –∏–ª–∏ (None, None, None)
    """
    if not payload:
        return None, None, None
    qs = parse_qs(payload, keep_blank_values=True)
    def get(k, alt=None):
        v = qs.get(k) or (qs.get(alt) if alt else None)
        return (v[0] if v else None) or None
    return (
        get("utm_source", "s"),
        get("utm_medium", "m"),
        get("utm_campaign", "c"),
    )

# -------- –∫–æ–Ω—Ñ–∏–≥ –±—ç–∫–∞ --------
def _resolve_backend() -> str:
    url = (
        os.getenv("BACKEND_URL")
        or os.getenv("BACKEND_BASE_URL")
        or "http://backend:8000"
    )
    return url.rstrip("/")

BACKEND_URL = _resolve_backend()
API_BASE = os.getenv("API_BASE_URL", f"{BACKEND_URL}/api/v1").rstrip("/")

# -------- –º–∞–ª–µ–Ω—å–∫–∏–π HTTP-–∫–ª–∏–µ–Ω—Ç --------
async def _api(method: str, path: str, **kw):
    timeout = httpx.Timeout(20.0)
    async with httpx.AsyncClient(timeout=timeout) as cli:
        r = await cli.request(method, f"{API_BASE}{path}", **kw)
        r.raise_for_status()
        if r.headers.get("content-type","").startswith("application/json"):
            return r.json()
        return r.text

async def _get_auth_url(tg_id: int) -> str | None:
    try:
        data = await _api("GET", "/hh/login", params={"tg_id": tg_id})
        return data.get("auth_url")
    except Exception:
        return None

async def _get_link_status(tg_id: int) -> dict:
    try:
        return await _api("GET", "/hh/link-status", params={"tg_id": tg_id})
    except Exception:
        return {"linked": False}

async def _users_seen(u) -> None:
    payload = {
        "tg_id": u.id,
        "username": u.username,
        "first_name": u.first_name,
        "last_name": u.last_name,
        "is_premium": getattr(u, "is_premium", False),
        "lang": getattr(u, "language_code", None),
        "ref": None,
    }
    try:
        await _api("POST", "/users/seen", json=payload)
    except Exception:
        pass
    
async def _users_set_utm(tg_id: int, s: str|None, m: str|None, c: str|None) -> None:
    """–ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å UTM (–Ω–∞ –±—ç–∫–µ —á–µ—Ä–µ–∑ COALESCE, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ç–∏—Ä–∞—Ç—å –ø–µ—Ä–≤–∏—á–Ω—É—é –º–µ—Ç–∫—É)."""
    if not any([s, m, c]):
        return
    try:
        await _api("POST", "/users/utm", json={"tg_id": tg_id, "utm_source": s, "utm_medium": m, "utm_campaign": c})
    except Exception:
        pass
# -------- –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è ¬´–æ–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è¬ª --------
_REMINDER_SCHEDULED: set[int] = set()
# -------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------
WELCOME = (
    "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ hh.ru.\n\n"
)

def _kb_start(auth_url: str | None = None) -> InlineKeyboardMarkup:
    rows = []
    if auth_url:
        rows.append([InlineKeyboardButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ù–ù", url=auth_url)])
    else:
        rows.append([InlineKeyboardButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ù–ù", callback_data="link_account")])
    rows.append([InlineKeyboardButton("‚≠ê –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ?", callback_data="is_safe")])
    return InlineKeyboardMarkup(rows)

def _kb_cases_nudge() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–∫–ª–∏–∫–∏", callback_data="start_responses")]]
    )    
# -------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ: –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ --------
async def _remind_once_after_30m(application: Application, chat_id: int, tg_id: int):
    # –°–ø–∏–º 30 –º–∏–Ω—É—Ç, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, —à–ª—ë–º –†–û–í–ù–û –æ–¥–∏–Ω —Ä–∞–∑.
    try:
        await asyncio.sleep(30 * 60)
        status = await _get_link_status(tg_id)
        if status.get("linked"):
            return  # –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —à–ª—ë–º

        auth_url = await _get_auth_url(tg_id)
        await application.bot.send_message(
            chat_id=chat_id,
            text=(
                "‚è≥ –í—ã —Ç–∞–∫ –∏ –Ω–µ –Ω–∞—á–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º‚Ä¶\n\n"
                "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –∫–µ–π—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                "<a href='https://'>+4 –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 50‚Äì120k –∑–∞ 3 –Ω–µ–¥–µ–ª–∏</a>\n"
                "<a href='https://'>–†–∞–±–æ—Ç–∞ –∑–∞ 2 –Ω–µ–¥–µ–ª–∏ –≤–º–µ—Å—Ç–æ 2 –º–µ—Å—è—Ü–µ–≤</a>\n"
                "<a href='https://'>–û—Ñ—Ñ–µ—Ä –Ω–∞ 72% –≤—ã—à–µ –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—Ç–∞</a>\n\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ HH."
            ),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ù–ù",
                                      url=auth_url) if auth_url else
                 InlineKeyboardButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ù–ù", callback_data="link_account")]
            ]),
            disable_web_page_preview=True,
            parse_mode="HTML",
        )
    finally:
        _REMINDER_SCHEDULED.discard(tg_id)

# -------- —Ö–µ–Ω–¥–ª–µ—Ä—ã --------
async def in_development(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(
        "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∞ hh.ru —á–µ—Ä–µ–∑ /start."
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    await _users_seen(user)

    args = context.args or []
    payload = (args[0] if args and isinstance(args[0], str) else "").strip()
    if not payload and update.message and isinstance(update.message.text, str):
        txt = update.message.text.strip()
        payload = txt.partition(" ")[2] if " " in txt else ""

    # 1.1) –†–µ—Ñ-–∫–æ–¥ 
    if payload.startswith("ref_") and len(payload) > 4:
        code = payload[4:].strip()
        try:
            await referrals_track(chat_id, code)
        except Exception:
            pass

    # 1.2) UTM-–º–µ—Ç–∫–∏
    utm_s, utm_m, utm_c = _parse_utm_from_payload(payload)
    await _users_set_utm(user.id, utm_s, utm_m, utm_c)

    # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É HH
    status = await _get_link_status(user.id)
    linked = bool(status.get("linked"))

    if not linked:
        auth_url = await _get_auth_url(user.id)
        await update.effective_message.reply_text(
            WELCOME,
            reply_markup=_kb_start(auth_url),
            disable_web_page_preview=True,
        )

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –û–î–ù–û –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–∞–º–æ–º –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ
        if user.id not in _REMINDER_SCHEDULED:
            _REMINDER_SCHEDULED.add(user.id)
            # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ event-loop –±–æ—Ç–∞
            context.application.create_task(
                _remind_once_after_30m(context.application, chat_id, user.id)
            )
        return  # –≤–∞–∂–Ω–æ: –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é ¬´—É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω¬ª

    await update.effective_message.reply_text(
        "‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω. –ì–æ—Ç–æ–≤—ã –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏!",
        disable_web_page_preview=True,
    )

    # –≤—Å—Ç–∞–≤–∫–∞ –ù–û–í–û–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É ¬´–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω‚Ä¶¬ª –∏ –º–µ–Ω—é
    cases_text = (
        "üôå –° –±–æ—Ç–æ–º –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã –±—É–¥–µ—Ç –∏–¥—Ç–∏ –±—ã—Å—Ç—Ä–µ–µ –∏ –ª–µ–≥—á–µ. –ò—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        "<a href=''>üëâ +4 –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 50‚Äì120k –∑–∞ 3 –Ω–µ–¥–µ–ª–∏</a>\n"
        "<a href=''>üëâ –†–∞–±–æ—Ç–∞ –∑–∞ 2 –Ω–µ–¥–µ–ª–∏ –≤–º–µ—Å—Ç–æ 2 –º–µ—Å—è—Ü–µ–≤</a>\n"
        "<a href=''>üëâ –û—Ñ—Ñ–µ—Ä –Ω–∞ 72% –≤—ã—à–µ –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—Ç–∞</a>"
    )
    await update.effective_message.reply_text(
        cases_text,
        reply_markup=_kb_cases_nudge(),
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
    )

    from routers import menu
    await menu.main_menu(update, context)
    
async def start_over(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await start(update, context)

async def link_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    query = update.callback_query
    if query:
        await query.answer()

    auth_url = await _get_auth_url(tg_id)
    text = "–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ hh.ru –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —á–∞—Ç:"
    if not auth_url:
        msg = text + "\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if query and query.message:
            try:
                await query.message.edit_text(msg)
                return
            except Exception:
                pass
        await update.effective_chat.send_message(msg)
        return

    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ hh.ru", url=auth_url)]])
    if query and query.message:
        try:
            await query.message.edit_text(text, reply_markup=kb)
            return
        except Exception:
            pass
    await update.effective_chat.send_message(text, reply_markup=kb)

async def is_safe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()

    txt = (
        "üîí –ü–æ–¥–∫–ª—é—á–∞—Ç—å hh-–∞–∫–∫–∞—É–Ω—Ç –∫ –Ω–∞—à–µ–º—É –±–æ—Ç—É –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ.\n"
        "–ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –∏–º–µ–µ–º –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞—Ä–æ–ª—è–º ‚Äî –≤—Å—ë –∏–¥—ë—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—â—ë–Ω–Ω–æ–µ API.\n\n"
        "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ API hh.ru —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∫–∏ ‚Äî –ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å –Ω–µ –æ —á–µ–º.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n"
        "üôå –ú—ã –∏–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–∞—Ö: –¥–µ—Å—è—Ç–∫–∏ —Ç—ã—Å—è—á –æ—Ç–∫–ª–∏–∫–æ–≤ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.\n\n"
        "–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ @.\n\n"
        "üöÄ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç hh –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
    )

    auth_url = await _get_auth_url(update.effective_user.id)
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(
            "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ù–ù",
            url=auth_url
        ) if auth_url else InlineKeyboardButton(
            "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ù–ù",
            callback_data="link_account"
        )]
    ])

    if update.callback_query and update.callback_query.message:
        try:
            await update.callback_query.message.edit_text(
                txt, reply_markup=kb, disable_web_page_preview=True
            )
            return
        except Exception:
            pass

    await update.effective_chat.send_message(
        txt, reply_markup=kb, disable_web_page_preview=True
    )

async def start_again(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()
    auth_url = await _get_auth_url(update.effective_user.id)
    await update.effective_message.reply_text(
        WELCOME,
        reply_markup=_kb_start(auth_url),
        disable_web_page_preview=True,
    )

def setup(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(is_safe,      pattern=r"^is_safe$"))
    app.add_handler(CallbackQueryHandler(start_again,  pattern=r"^start_again$"))
    app.add_handler(CallbackQueryHandler(link_account, pattern=r"^link_account$"))

def handler() -> CommandHandler:
    return CommandHandler("start", start)