from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, ConversationHandler
from utils import texts
from utils.api_client import subscription_current
from utils.api_client import referrals_me, referrals_generate, register_user
import logging
import httpx
import os
from datetime import datetime, timezone

BACKEND_BASE = os.getenv("BACKEND_BASE_URL", "").rstrip("/")

BACKEND_URL = os.getenv("BACKEND_URL") or os.getenv("BACKEND_BASE_URL") or "http://backend:8000"
API_BASE = f"{BACKEND_URL.rstrip('/')}/api/v1"

async def _api(method: str, path: str, **kw):
    async with httpx.AsyncClient(timeout=20.0) as cli:
        r = await cli.request(method, f"{API_BASE}{path}", **kw)
        r.raise_for_status()
        return r.json() if r.headers.get("content-type","").startswith("application/json") else r.text

async def _get_link_status(tg_id: int) -> dict:
    try:
        return await _api("GET", "/hh/link-status", params={"tg_id": tg_id})
    except Exception:
        return {"linked": False}

async def _get_auth_url(tg_id: int) -> str | None:
    try:
        data = await _api("GET", "/hh/login", params={"tg_id": tg_id})
        return data.get("auth_url")
    except Exception:
        return None

async def _unlink_hh(tg_id: int) -> bool:
    try:
        data = await _api("POST", "/hh/unlink", params={"tg_id": tg_id})
        return bool(data.get("unlinked"))
    except Exception:
        return False
        
def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–∫–ª–∏–∫–∏",       callback_data="start_responses")],
        [InlineKeyboardButton("üìù –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞", callback_data="cover_letters")],
        [InlineKeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞",                callback_data="subscription")],
        [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",   callback_data="referral")],
        [InlineKeyboardButton("üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞",               callback_data="support")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",               callback_data="settings")],
    ]
    return InlineKeyboardMarkup(keyboard)


def _fmt_expires(expires_at):
    if not expires_at:
        return "‚Äî"
    try:
        s = str(expires_at)
        if s.isdigit():
            dt = datetime.fromtimestamp(int(s), tz=timezone.utc)
        else:
            if s.endswith("Z"):
                s = s[:-1] + "+00:00"
            dt = datetime.fromisoformat(s)
            if not dt.tzinfo:
                dt = dt.replace(tzinfo=timezone.utc)
        return dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M UTC")
    except Exception:
        return str(expires_at)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int = None) -> None:
    """Displays the main menu."""
    reply_markup = get_main_menu_keyboard()
    text = texts.MAIN_MENU_TITLE
    
    if update and update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.edit_text(
            text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    elif update:
        await update.message.reply_text(
            text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    elif chat_id:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )

async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await main_menu(update, context)
    return ConversationHandler.END

async def show_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –±—ç–∫–∞."""
    tg_id = update.effective_chat.id

    link_status = await _get_link_status(tg_id)
    if not link_status.get("linked"):
        auth_url = await _get_auth_url(tg_id)
        text = (
            "–ß—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç hh.ru.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é."
        )
        kb_rows = []
        if auth_url:
            kb_rows.append([InlineKeyboardButton("–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ù–ù", url=auth_url)])
        kb_rows.append([InlineKeyboardButton(texts.BACK_TO_MAIN_MENU, callback_data="main_menu")])
        await (update.callback_query.message.edit_text if update.callback_query else update.message.reply_text)(
            text, reply_markup=InlineKeyboardMarkup(kb_rows)
        )
        if update.callback_query:
            await update.callback_query.answer()
        return
    try:
        data = await subscription_current(tg_id)
    except Exception:
        data = None

    if not data:
        text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        keyboard = [[InlineKeyboardButton(texts.BACK_TO_MAIN_MENU, callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
    else:
        plan = (data.get("plan") or "‚Äî")
        raw_status = (data.get("status") or "inactive").lower()
        status_map = {
            "active": "–∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ",
            "paid": "–∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ",
            "inactive": "–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚õî",
            "expired": "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ ‚õî",
        }
        status = status_map.get(raw_status, raw_status)
        expires_at = _fmt_expires(data.get("expires_at"))
        days_left = data.get("days_left")

        def _plural_days(n: int) -> str:
            n = abs(int(n))
            if n % 10 == 1 and n % 100 != 11:
                return f"{n} –¥–µ–Ω—å"
            if 2 <= n % 10 <= 4 and not (12 <= n % 100 <= 14):
                return f"{n} –¥–Ω—è"
            return f"{n} –¥–Ω–µ–π"

        days_left_str = (_plural_days(days_left) if isinstance(days_left, int) else "‚Äî")

        if not data or raw_status in ("inactive", "expired"):
            text = (
                "üìÑ –ü–æ–¥–ø–∏—Å–∫–∞\n\n"
                "–í –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–æ:\n"
                "‚Ä¢ –¥–æ 200 –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ —Å—É—Ç–∫–∏\n"
                "‚Ä¢ —É–º–Ω—ã–µ –ø–∞—É–∑—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º\n"
                "‚Ä¢ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
                "–°—Ç–∞—Ç—É—Å: ‚õî –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ\n\n"
                "–û–ø–ª–∞—Ç–∞ —Ä–∞–∑–æ–≤–∞—è, –±–µ–∑ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–π."
            )
            keyboard = [
                [InlineKeyboardButton("–ù–µ–¥–µ–ª—è ‚Äî 590‚ÇΩ", callback_data="pay_week")],
                [InlineKeyboardButton("–ú–µ—Å—è—Ü ‚Äî 1390‚ÇΩ", callback_data="pay_month")],
                [InlineKeyboardButton(texts.BACK_TO_MAIN_MENU, callback_data="main_menu")],
            ]
        else:
            days_left_str = _plural_days(days_left) if isinstance(days_left, int) else "‚Äî"
            text = (
                "üìÑ –ü–æ–¥–ø–∏—Å–∫–∞\n\n"
                f"–°—Ç–∞—Ç—É—Å: ‚úÖ –û–ø–ª–∞—á–µ–Ω–æ\n"
                f"–¢–∞—Ä–∏—Ñ: {plan}\n"
                f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_at}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å: {days_left_str}\n\n"
                "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:"
            )
            keyboard = [
                [InlineKeyboardButton("–ù–µ–¥–µ–ª—è ‚Äî 590‚ÇΩ", callback_data="pay_week")],
                [InlineKeyboardButton("–ú–µ—Å—è—Ü ‚Äî 1390‚ÇΩ", callback_data="pay_month")],
                [InlineKeyboardButton(texts.BACK_TO_MAIN_MENU, callback_data="main_menu")],
            ]
        reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.edit_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)

from urllib.parse import urlparse

def _is_http_url(s: str) -> bool:
    if not s or not isinstance(s, str):
        return False
    s = s.strip()
    if any(ch in s for ch in ("<html", "<!doctype", "</html", "\n")):
        return False
    try:
        u = urlparse(s)
        return u.scheme in ("http", "https") and bool(u.netloc)
    except Exception:
        return False
async def handle_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    tg_id = update.effective_user.id
    plan = "week" if (query and query.data == "pay_week") else "month"

    pay_url = f"{BACKEND_BASE}/pay?plan={plan}&tg_id={tg_id}"
    text = (
        "‚úÖ <b>–°—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω</b>.\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∑–∞—â–∏—â—ë–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã.\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å¬ª."
    )
    kb = [
        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="subscription")],
        [InlineKeyboardButton(texts.BACK_TO_MAIN_MENU, callback_data="main_menu")],
    ]
    await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(kb))

async def show_referral_program(update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ."""
    tg_id = update.effective_chat.id
    username = getattr(update.effective_user, "username", None)

    try:
        try:
            await register_user(tg_id, username)
        except Exception:
            pass  

        try:
            await referrals_generate(tg_id)  
        except Exception:
            pass

        data = await referrals_me(tg_id)

    except httpx.HTTPStatusError as e:
        logging.exception("referrals_me HTTP error: %s", e)
        data = None
    except Exception:
        logging.exception("referral_program failed")
        data = None

    if not data:
        text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        keyboard = [[InlineKeyboardButton(texts.BACK_TO_MAIN_MENU, callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.edit_text(
                text, reply_markup=reply_markup, parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                text, reply_markup=reply_markup, parse_mode="Markdown"
            )
        return

    ref_link = (data.get("link") or "").strip()

    balance_rub = float(data.get("balance", 0.0))
    lvl1 = int(data.get("level1", 0))
    lvl2 = int(data.get("level2", 0))
    lvl3 = int(data.get("level3", 0))
    
    text = (
        "üë• –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
        "–î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∞—à–∏—Ö –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö.\n\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <a href=\"{ref_link}\">{ref_link}</a>\n\n"
        "–£—Ä–æ–≤–Ω–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:\n"
        "1-–π —É—Ä–æ–≤–µ–Ω—å ‚Äî 20% –æ—Ç –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n"
        "2-–π —É—Ä–æ–≤–µ–Ω—å ‚Äî 10% –æ—Ç –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n"
        "3-–π —É—Ä–æ–≤–µ–Ω—å ‚Äî 5% –æ—Ç –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n\n"
        "üìä –¢–≤–æ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:\n\n"
        f"üë§ 1 —É—Ä–æ–≤–µ–Ω—å: {lvl1}\n"
        f"üë• 2 —É—Ä–æ–≤–µ–Ω—å: {lvl2}\n"
        f"üë• 3 —É—Ä–æ–≤–µ–Ω—å: {lvl3}\n\n"
        f"–ë–∞–ª–∞–Ω—Å: {balance_rub:.2f} —Ä—É–±.\n\n"
        "üìò –ü–æ–¥—Ä–æ–±–Ω–µ–µ: <a href=\"http:/\">–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞</a>"
    )
    
    keyboard = [[InlineKeyboardButton(texts.BACK_TO_MAIN_MENU, callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.edit_text(
            text, reply_markup=reply_markup, parse_mode="HTML", disable_web_page_preview=True
        )
    else:
        await update.message.reply_text(
            text, reply_markup=reply_markup, parse_mode="HTML", disable_web_page_preview=True
        )

async def handle_payment_stub(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handles the stub for payment processing (demo mode)."""
    query = update.callback_query
    await query.answer()
    
    context.user_data["subscription_status"] = "active"
    
    text = texts.SUBSCRIPTION_SUCCESS
    keyboard = [[InlineKeyboardButton(texts.BACK_TO_MAIN_MENU, callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(text, reply_markup=reply_markup)

async def show_support(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Displays support information (demo mode)."""
    support_text = texts.SUPPORT_INFO
    
    keyboard = [[InlineKeyboardButton(texts.BACK_TO_MAIN_MENU, callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.edit_text(support_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(support_text, reply_markup=reply_markup)
        
async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
 
    txt = (
        "–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–≤—è–∑–∞—Ç—å —Å–≤–æ–π HH-–∞–∫–∫–∞—É–Ω—Ç –æ—Ç –±–æ—Ç–∞.\n\n"
        "–í–∞–∂–Ω–æ: –µ—Å–ª–∏ —É –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞, –æ–Ω–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç hh.ru, "
        "–∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ."
    )
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîó –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ù–ù", callback_data="unlink_confirm")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],
    ])

    q = update.callback_query
    if q:
        await q.answer()
        await q.message.edit_text(txt, reply_markup=kb)
    else:
        await update.effective_message.reply_text(txt, reply_markup=kb)


async def unlink_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –≠–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≤—è–∑–∫–∏. –ï—Å–ª–∏ —É–∂–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏–≤—è–∑–∫–∏.
    """
    q = update.callback_query
    if q:
        await q.answer()

    tg_id = update.effective_user.id
    linked = False
    try:
        info = await _get_link_status(tg_id)
        linked = bool(info and info.get("linked"))
    except Exception as e:
        logging.warning("link-status failed in unlink_confirm: %s", e)

    if not linked:
        auth_url = await _get_auth_url(tg_id)
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ù–ù",
              url=auth_url) if auth_url else
             InlineKeyboardButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ù–ù", callback_data="link_account")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")],
        ])
        txt = ("–°–µ–π—á–∞—Å –∞–∫–∫–∞—É–Ω—Ç hh.ru –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω ‚Äî –æ—Ç–≤—è–∑—ã–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ.\n\n"
               "–ü—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º.")
        if q:
            await q.message.edit_text(txt, reply_markup=kb, disable_web_page_preview=True)
        else:
            await update.effective_message.reply_text(txt, reply_markup=kb, disable_web_page_preview=True)
        return

    # –ï—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–∞, –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="unlink_yes")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")],
    ])
    txt = "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç hh.ru?"
    if q:
        await q.message.edit_text(txt, reply_markup=kb)
    else:
        await update.effective_message.reply_text(txt, reply_markup=kb)

async def unlink_yes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–≤—è–∑–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å ¬´linked=True¬ª –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç.
    """
    q = update.callback_query
    if q:
        await q.answer()

    tg_id = update.effective_user.id
    linked = False
    try:
        info = await _get_link_status(tg_id)
        linked = bool(info and info.get("linked"))
    except Exception as e:
        logging.warning("link-status failed in unlink_yes: %s", e)

    if not linked:
        auth_url = await _get_auth_url(tg_id)
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ù–ù",
              url=auth_url) if auth_url else
             InlineKeyboardButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ù–ù", callback_data="link_account")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings")],
        ])
        txt = ("–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω ‚Äî –æ—Ç–≤—è–∑—ã–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ.\n\n"
               "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.")
        await q.message.edit_text(txt, reply_markup=kb, disable_web_page_preview=True)
        return

    ok = await _unlink_hh(tg_id)

    if ok:
        txt = (
            "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω.\n\n"
            "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞."
        )
    else:
        txt = (
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É."
        )

    auth_url = await _get_auth_url(tg_id)
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ù–ù",
          url=auth_url) if auth_url else
         InlineKeyboardButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ù–ù", callback_data="link_account")]
    ])

    await q.message.edit_text(txt, reply_markup=kb, disable_web_page_preview=True)
    